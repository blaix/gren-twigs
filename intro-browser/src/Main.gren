module Main exposing (main)

import Browser
import Html exposing (Html)
import Html.Events as Event
import LocalStorage
import Task
import WebStorage


main : Program {} Model Msg
main =
    Browser.element
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        }


type alias Model =
    Int


init : flags -> { model : Model, command : Cmd Msg }
init _ =
    { model = 0
    , command =
        LocalStorage.get "count"
            |> Task.attempt GotCount
    }


type Msg
    = ClickedPlus
    | ClickedMinus
    | GotCount (Result WebStorage.ReadError String)


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    when msg is
        ClickedPlus ->
            { model = model + 1
            , command = Cmd.none
            }
        
        ClickedMinus ->
            { model = model - 1
            , command = Cmd.none
            }

        GotCount (Ok count) ->
            { model = 
                String.toInt count
                    |> Maybe.withDefault 0
            , command = Cmd.none
            }

        GotCount (Err error) ->
            { model = model
            , command = Cmd.none
            }


view : Model -> Html Msg
view model =
    Html.div [] 
        [ Html.button
            [ Event.onClick ClickedMinus ]
            [ Html.text "-" ]
        , Html.text (String.fromInt model)
        , Html.button
            [ Event.onClick ClickedPlus ]
            [ Html.text "+" ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none
