module Main exposing (main)

import Browser
import Html exposing (Html)
import Html.Events as Event
import LocalStorage
import Task
import WebStorage


main : Program {} Model Msg
main =
    Browser.element
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        }


type alias Model =
    { count : Int
    , error : Maybe Error
    }


type Error
    = NoValue
    | StorageDisabled
    | StorageFull


init : flags -> { model : Model, command : Cmd Msg }
init _ =
    { model =
        { count = 0
        , error = Nothing
        }
    , command =
        LocalStorage.get "count"
            |> Task.attempt GotCount
    }


type Msg
    = ClickedPlus
    | ClickedMinus
    | GotCount (Result WebStorage.ReadError String)
    | SetCount (Result WebStorage.WriteError {})


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    when msg is
        ClickedPlus ->
            let
                newCount =
                    model.count + 1
            in
            { model = 
                { model | count = newCount }
            , command =
                LocalStorage.set "count" (String.fromInt newCount)
                    |> Task.attempt SetCount
            }
        
        ClickedMinus ->
            let
                newCount =
                    model.count - 1
            in
            { model =
                { model | count = newCount }
            , command =
                LocalStorage.set "count" (String.fromInt newCount)
                    |> Task.attempt SetCount
            }

        GotCount (Ok count) ->
            { model = 
                { model
                    | count =
                        String.toInt count
                            |> Maybe.withDefault 0
                }
            , command = Cmd.none
            }

        GotCount (Err error) ->
            { model =
                { model
                    | error =
                        when error is
                            WebStorage.NoValue -> Just NoValue
                            WebStorage.ReadBlocked -> Just StorageDisabled
                }
            , command = Cmd.none
            }

        SetCount (Ok _) ->
            { model = model
            , command = Cmd.none
            }
        
        SetCount (Err error) ->
            { model =
                { model
                    | error =
                        when error is
                            WebStorage.QuotaExceeded -> Just StorageFull
                            WebStorage.WriteBlocked -> Just StorageDisabled
                }
            , command =
                Cmd.none
            }


view : Model -> Html Msg
view model =
    Html.div [] 
        [ Html.button
            [ Event.onClick ClickedMinus ]
            [ Html.text "-" ]
        , Html.text (String.fromInt model.count)
        , Html.button
            [ Event.onClick ClickedPlus ]
            [ Html.text "+" ]
        , Html.p []
            [ Html.text <|
                when model.error is
                    Nothing -> ""
                    Just error ->
                        when error is
                            NoValue -> ""
                            StorageDisabled -> "Local storage is disabled"
                            StorageFull -> "Local storage is full"
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none
