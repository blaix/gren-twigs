module Main exposing (main)


import Ansi
import Bytes exposing (Bytes)
import ChildProcess exposing (FailedRun, SuccessfulRun)
import Init
import Node
import Stream
import Task exposing (Task)
import Time
import Tui
import UI
import UI.Attribute as Attr
import UI.TextField as TextField exposing (TextField)


main : Tui.Program Model Msg
main =
    Tui.defineProgram
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onInput = GotInput
        }


type alias Model =
    { stdout : Stream.Writable Bytes
    , procPerm : ChildProcess.Permission
    , output : String
    , lastTick : Millis
    , remaining : Maybe Millis
    , remainingField : TextField
    , paused : Bool
    }


type alias Millis =
    Int


init : Tui.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await ChildProcess.initialize <| \procPerm ->
    Init.awaitTask Time.now <| \time ->
        let
            lastTick =
                Time.posixToMillis time
        in
        Node.startProgram
            { model = 
                { stdout = env.stdout
                , procPerm = procPerm
                , output = ""
                , lastTick = lastTick
                , remaining = Nothing
                , remainingField = TextField.init ""
                , paused = True
                }
            , command = 
                Tui.hideCursor env.stdout
                    |> Task.execute
            }


millisToMins : Millis -> Int
millisToMins millis =
    millis // 1000 // 60


millisToSeconds : Millis -> Int
millisToSeconds millis =
    let
        minutes =
            millisToMins millis
    in
    (millis - (minutes * 60 * 1000)) // 1000


millisToString : Millis -> String
millisToString millis =
    let
        mins =
            millisToMins millis
                |> String.fromInt
                |> String.padLeft 2 '0'
        
        seconds =
            millisToSeconds millis
                |> String.fromInt
                |> String.padLeft 2 '0'
    in
    mins ++ ":" ++ seconds


cowsay : ChildProcess.Permission -> String -> Task FailedRun SuccessfulRun
cowsay procPerm output =
    ChildProcess.run procPerm "cowsay" [ output ]
        ChildProcess.defaultRunOptions


type Msg
    = GotInput Tui.Input
    | GotOutput (Result FailedRun SuccessfulRun)
    | Tick Time.Posix


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    when msg is
        GotInput input ->
            when model.remaining is
                Just remaining ->
                    when input is
                        Tui.Escape ->
                            { model = model
                            , command = 
                                Tui.exit model.stdout
                                    |> Task.execute
                            }

                        Tui.KeyChar "p" ->
                            { model = { model | paused = True }
                            , command = Cmd.none
                            }

                        Tui.KeyChar "s" ->
                            { model = { model | paused = False }
                            , command = Cmd.none
                            }

                        Tui.KeyChar "r" ->
                            { model = { model | remaining = Nothing }
                            , command = Cmd.none
                            }

                        _ ->
                            { model = model
                            , command = 
                                Cmd.none
                            }

                Nothing ->
                    when input is
                        Tui.Return ->
                            { model =
                                { model
                                    | remaining =
                                        TextField.toString model.remainingField
                                            |> String.toInt
                                            |> Maybe.map
                                                (\remaining ->
                                                    remaining * 60 * 1000
                                                )
                                }
                            , command =
                                Cmd.none
                            }

                        _ ->
                            { model =
                                { model
                                    | remainingField = TextField.update input model.remainingField
                                }
                            , command =
                                Cmd.none
                            }
                    

        GotOutput (Ok run) ->
            { model =
                { model
                    | output =
                        run.stdout
                            |> Bytes.toString
                            |> Maybe.withDefault "Can't decode cowsay output!"
                }
            , command =
                Cmd.none
            }

        GotOutput (Err run) ->
            { model =
                { model
                    | output =
                        run.stderr
                            |> Bytes.toString
                            |> Maybe.withDefault "Can't decode cowsay error!"
                }
            , command =
                Cmd.none
            }

        Tick time ->
            when model.remaining is
                Just remaining ->
                    let
                        newLastTick =
                            Time.posixToMillis time

                        delta =
                            newLastTick - model.lastTick

                        newRemaining =
                            if model.paused then
                                remaining
                            else
                                remaining - delta
                    in 
                    { model =
                        { model
                            | lastTick = newLastTick
                            , remaining = Just newRemaining
                        }
                    , command =
                        cowsay model.procPerm (millisToString newRemaining)
                            |> Task.attempt GotOutput
                    }

                Nothing ->
                    { model = model
                    , command = Cmd.none
                    }


view : Model -> UI.Element
view model =
    when model.remaining is
        Just _ ->
            viewTimer model

        Nothing ->
            viewForm model


viewTimer : Model -> UI.Element
viewTimer model =
    let
        color =
            if model.paused then
                Ansi.White
            else
                Ansi.Green
    in
    UI.column []
        [ UI.text
            [ Attr.bgColor Ansi.White, Attr.color Ansi.Black ]
            "[p]ause [s]tart [r]estart"
        , UI.text [ Attr.color color ] model.output
        ]

viewForm : Model -> UI.Element
viewForm model =
    UI.row []
        [ UI.text [] "Minutes: "
        , TextField.view model.remainingField
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Time.every 1000 Tick
